- name: Wait vault container
  kubernetes.core.k8s:
    kind: Pod
    name: vault-0
    namespace: "{{ vault.namespace }}"
    wait: true
    wait_sleep: 10
    wait_timeout: 600
    wait_condition:
      reason:
      type: Initialized
      status: "True"

- name: Find vault keys
  kubernetes.core.k8s_info:
    namespace: "{{ vault.namespace }}"
    kind: Secret
    name: vault-admin
  register: vault_keys

# Check vault status
- name: Check vault status - node 1
  ansible.builtin.include_tasks: check.yml
  vars:
    vault_pod: vault-0

- name: Check if vault is coherent
  ansible.builtin.assert:
    that:
      - ((vault_status in ['sealed', 'OK']) and (vault_keys.resources | length > 0)) or ((vault_status == 'not init') and (vault_keys.resources | length == 0))
    fail_msg:
      - "Warning !"
      - "Vault isn't initialized but you got a vault-secret secret inside the vault namespace, delete it before restart deployment if you want to initialize."
      - "or"
      - "Vault is initialized but you have no vault-admin secret inside the vault namespace"

# Init vault node 1
- name: Init vault node - node 1
  kubernetes.core.k8s_exec:
    container: vault
    pod: vault-0
    namespace: "{{ vault.namespace }}"
    command: vault operator init -key-shares=3 -key-threshold=2 -format=json
  register: init
  until: "init is not failed"
  retries: 3
  delay: 20
  when: vault_status == 'not init'

- name: Store vault keys
  kubernetes.core.k8s:
    definition:
      kind: Secret
      metadata:
        name: vault-admin
        namespace: "{{ vault.namespace }}"
      data:
        unsealKey1: "{{ init.stdout | from_json | json_query('unseal_keys_b64[0]') | b64encode }}"
        unsealKey2: "{{ init.stdout | from_json | json_query('unseal_keys_b64[1]') | b64encode }}"
        unsealKey3: "{{ init.stdout | from_json | json_query('unseal_keys_b64[2]') | b64encode }}"
        rootToken: "{{ init.stdout | from_json | json_query('root_token') | b64encode }}"
        initConfig: "{{ init.stdout | from_json | b64encode }}"
  when: vault_keys.resources | length == 0

- name: Find vault keys
  kubernetes.core.k8s_info:
    namespace: "{{ vault.namespace }}"
    kind: Secret
    name: vault-admin
  register: vault_keys

- name: Set fact for vault secrets
  ansible.builtin.set_fact:
    vault_token: "{{ vault_keys.resources[0].data.rootToken | b64decode }}"

# Unseal vault node 1
- name: Set seal count - node 1
  ansible.builtin.set_fact:
    vault_pod: "vault-0"
    unsealKeyNb: "0"

- name: Unseal vault primary - node 1
  ansible.builtin.include_tasks: unseal.yml
  # vars:
  #   vault_pod: vault-0
  when: vault_status == 'not init' or vault_status == 'sealed'

# Init vault node 2
- name: Check vault status - node 2
  ansible.builtin.include_tasks: check.yml
  vars:
    vault_pod: vault-1

- name: Init vault node - node 2
  kubernetes.core.k8s_exec:
    container: vault
    pod: "vault-1"
    namespace: "{{ vault.namespace }}"
    command: vault operator raft join http://vault-0.vault-internal:8200
  retries: 3
  delay: 20
  when: vault_status == 'not init'

# Init node 3
- name: Check vault status - node 3
  ansible.builtin.include_tasks: check.yml
  vars:
    vault_pod: vault-2

- name: Init vault node - node 3
  kubernetes.core.k8s_exec:
    container: vault
    pod: "vault-2"
    namespace: "{{ vault.namespace }}"
    command: vault operator raft join http://vault-0.vault-internal:8200
  retries: 3
  delay: 20
  when: vault_status == 'not init'

# Unseal node 2
- name: Check vault status - node 2
  ansible.builtin.include_tasks: check.yml
  vars:
    vault_pod: vault-1

- name: Set seal count - node 2
  ansible.builtin.set_fact:
    vault_pod: "vault-1"
    unsealKeyNb: "0"

- name: Unseal vault node - node 2
  ansible.builtin.include_tasks: unseal.yml
  # vars:
  #   vault_pod: vault-2
  when: vault_status == 'not init' or vault_status == 'sealed'

# Unseal node 3
- name: Check vault status - node 2
  ansible.builtin.include_tasks: check.yml
  vars:
    vault_pod: vault-2

- name: Set seal count - node 3
  ansible.builtin.set_fact:
    vault_pod: "vault-2"
    unsealKeyNb: "0"

- name: Unseal vault node - node 3
  ansible.builtin.include_tasks: unseal.yml
  vars:
    vault_pod: vault-2
  when: vault_status == 'not init' or vault_status == 'sealed'

- name: Get kv engines
  ansible.builtin.uri:
    validate_certs: true
    method: GET
    url: "https://{{ vault.domain }}/v1/sys/mounts/secret"
    status_code: [200, 400]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
  register: get_engines

- name: Create default 'secret/' kv engine
  ansible.builtin.uri:
    validate_certs: true
    url: "https://{{ vault.domain }}/v1/sys/mounts/secret"
    method: POST
    status_code: [204]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
    body:
      type: kv
      options:
        version: 2
    body_format: json
  when: get_engines.status == 400
