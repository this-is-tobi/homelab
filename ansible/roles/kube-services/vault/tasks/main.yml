---
- name: Add hashicorp helm repo
  kubernetes.core.helm_repository:
    name: hashicorp
    repo_url: https://helm.releases.hashicorp.com
    state: present

- name: Deploy vault helm chart
  kubernetes.core.helm:
    name: vault
    update_repo_cache: true
    chart_ref: hashicorp/vault
    chart_version: 0.25.0
    create_namespace: true
    namespace: vault
    wait: true
    timeout: 10m0s
    state: present
    values: "{{ lookup('template', 'helm-values.yml.j2') | from_yaml }}"

- name: Wait vault container
  kubernetes.core.k8s:
    kind: Pod
    name: vault-0
    namespace: vault
    wait: true
    wait_sleep: 10
    wait_timeout: 600
    wait_condition:
      reason:
      type: Initialized
      status: "True"

- name: Find vault keys
  kubernetes.core.k8s_info:
    namespace: vault
    kind: Secret
    name: vault-keys
  register: vault_keys

- name: Check vault status
  include_tasks: check.yml

- name: Check if vault is coherent
  ansible.builtin.assert:
    that:
      - ((vault_status in ['sealed', 'OK']) and (vault_keys.resources | length > 0)) or ((vault_status == 'not init') and (vault_keys.resources | length == 0))
    fail_msg:
      - "Warning !"
      - "Vault isn't initialized but you got a vault-secret secret inside the vault namespace, delete it before restart deployment if you want to initialize."
      - "or"
      - "Vault is initialized but you have no vault-keys secret inside the vault namespace"

- name: Init vault
  kubernetes.core.k8s_exec:
    container: vault
    pod: vault-0
    namespace: vault
    command: vault operator init -key-shares=3 -key-threshold=2
  when: vault_status == 'not init'
  register: init
  until: "init is not failed"
  retries: 6
  delay: 10

- name: Store vault keys
  kubernetes.core.k8s:
    definition:
      kind: Secret
      metadata:
        name: vault-keys
        namespace: vault
      data:
        unsealKey1: "{{ init.stdout_lines[0] | regex_replace('^Unseal Key 1: (.*)$', '\\1', multiline=True) | b64encode }}"
        unsealKey2: "{{ init.stdout_lines[1] | regex_replace('^Unseal Key 2: (.*)$', '\\1', multiline=True) | b64encode }}"
        unsealKey3: "{{ init.stdout_lines[2] | regex_replace('^Unseal Key 3: (.*)$', '\\1', multiline=True) | b64encode }}"
        rootToken: "{{ init.stdout_lines[4] | regex_replace('^Initial Root Token: (.*)$', '\\1', multiline=True) | b64encode }}"
  when: vault_keys.resources | length == 0

- name: Find vault keys
  kubernetes.core.k8s_info:
    namespace: vault
    kind: Secret
    name: vault-keys
  register: vault_keys

- name: Fetch vault root token
  ansible.builtin.shell:
    cmd: |
      yq -i '.services.vault.token = "{{ vault_keys.resources[0].data.root_token }}"' inventory/group_vars/cluster.yml
  no_log: true
  when: services.vault.token == ""

- name: Fetch vault unseal key 1
  ansible.builtin.shell:
    cmd: |
      yq -i '.services.vault.unsealKey1 = "{{ vault_keys.resources[0].data.unsealKey1 }}"' inventory/group_vars/cluster.yml
  no_log: true
  when: services.vault.unsealKey1 == ""

- name: Fetch vault unseal key 2
  ansible.builtin.shell:
    cmd: |
      yq -i '.services.vault.unsealKey2 = "{{ vault_keys.resources[0].data.unsealKey2 }}"' inventory/group_vars/cluster.yml
  no_log: true
  when: services.vault.unsealKey2 == ""

- name: Fetch vault unseal key 3
  ansible.builtin.shell:
    cmd: |
      yq -i '.services.vault.unsealKey3 = "{{ vault_keys.resources[0].data.unsealKey3 }}"' inventory/group_vars/cluster.yml
  no_log: true
  when: services.vault.unsealKey3 == ""

- name: Set fact to unseal vault
  ansible.builtin.set_fact:
    num: "0"

- name: Unseal vault
  when: vault_status == 'not init' or vault_status == 'sealed'
  include_tasks: unseal.yml

- name: Check vault status
  include_tasks: check.yml

- name: Perform sso configuration
  include_tasks: sso.yml

- name: Create default 'secret/' kv engine
  include_tasks: kv-engine.yml
  with_items: 
    - kv_path: secret

- name: Create policies
  include_tasks: policy.yml
  with_items: 
    - policy_name: admin
      policy: "{{ lookup('ansible.builtin.template', 'superadmin-policy.json.j2') }}"

- name: Create admin group
  include_tasks: group.yml
  with_items: 
    - username: admin
