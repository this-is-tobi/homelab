# Argocd
- name: Create argocd client
  community.general.keycloak_client:
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak.domain }}
    auth_realm: master
    auth_username: "{{ keycloak.username }}"
    auth_password: "{{ keycloak.password }}"
    realm: "{{ keycloak.realm }}"
    client_id: "{{ argocd.keycloak.clientId }}"
    name: "{{ argocd.keycloak.clientId }}"
    always_display_in_console: true
    frontchannel_logout: true
    enabled: true
    redirect_uris:
      - https://{{ argocd.domain }}/*
    web_origins:
      - https://{{ argocd.domain }}
    standard_flow_enabled: true
    implicit_flow_enabled: false
    direct_access_grants_enabled: true
    clientAuthenticatorType: client-secret
    public_client: false
    protocol: openid-connect
    attributes:
      include.in.token.scope: true
      display.on.consent.screen: true
    default_client_scopes:
      - profile
      - email
      - groups
      - roles
    state: present

- name: Get argocd client secret
  community.general.keycloak_clientsecret_info:
    client_id: "{{ argocd.keycloak.clientId }}"
    realm: "{{ keycloak.realm }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak.domain }}
    auth_realm: master
    auth_username: "{{ keycloak.username }}"
    auth_password: "{{ keycloak.password }}"
  register: argocd_client_secret
  no_log: true

- name: Set argocd client secret
  ansible.builtin.shell:
    cmd: |
      yq -i '.argocd.keycloak.clientSecret = "{{ argocd_client_secret.clientsecret_info.value }}"' ../inventory/group_vars/all.yml
  when: not argocd.keycloak.clientSecret == "{{ argocd_client_secret.clientsecret_info.value }}"

# Sonarqube
- name: Create sonarqube client
  community.general.keycloak_client:
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak.domain }}
    auth_realm: master
    auth_username: "{{ keycloak.username }}"
    auth_password: "{{ keycloak.password }}"
    realm: "{{ keycloak.realm }}"
    client_id: "{{ sonarqube.keycloak.clientId }}"
    name: "{{ sonarqube.keycloak.clientId }}"
    always_display_in_console: true
    frontchannel_logout: true
    enabled: true
    redirect_uris:
      - https://{{ sonarqube.domain }}/*
    web_origins:
      - https://{{ sonarqube.domain }}
    standard_flow_enabled: true
    implicit_flow_enabled: false
    direct_access_grants_enabled: true
    clientAuthenticatorType: client-secret
    public_client: false
    protocol: openid-connect
    default_client_scopes:
      - profile
      - email
      - groups
      - roles
    state: present

- name: Get sonarqube client secret
  community.general.keycloak_clientsecret_info:
    client_id: "{{ sonarqube.keycloak.clientId }}"
    realm: "{{ keycloak.realm }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak.domain }}
    auth_realm: master
    auth_username: "{{ keycloak.username }}"
    auth_password: "{{ keycloak.password }}"
  register: sonarqube_client_secret
  no_log: true

- name: Set sonarqube client secret
  ansible.builtin.shell:
    cmd: |
      yq -i '.sonarqube.keycloak.clientSecret = "{{ sonarqube_client_secret.clientsecret_info.value }}"' ../inventory/group_vars/all.yml
  when: not sonarqube.keycloak.clientSecret == "{{ sonarqube_client_secret.clientsecret_info.value }}"

# Grafana
- name: Create grafana client
  community.general.keycloak_client:
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak.domain }}
    auth_realm: master
    auth_username: "{{ keycloak.username }}"
    auth_password: "{{ keycloak.password }}"
    realm: "{{ keycloak.realm }}"
    client_id: "{{ grafana.keycloak.clientId }}"
    name: "{{ grafana.keycloak.clientId }}"
    always_display_in_console: true
    frontchannel_logout: true
    enabled: true
    redirect_uris:
      - https://{{ grafana.domain }}/*
    web_origins:
      - https://{{ grafana.domain }}
    standard_flow_enabled: true
    implicit_flow_enabled: false
    direct_access_grants_enabled: true
    clientAuthenticatorType: client-secret
    public_client: false
    protocol: openid-connect
    default_client_scopes:
      - profile
      - email
      - groups
      - roles
    state: present

- name: Get grafana client secret
  community.general.keycloak_clientsecret_info:
    client_id: "{{ grafana.keycloak.clientId }}"
    realm: "{{ keycloak.realm }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak.domain }}
    auth_realm: master
    auth_username: "{{ keycloak.username }}"
    auth_password: "{{ keycloak.password }}"
  register: grafana_client_secret
  no_log: true

- name: Set grafana client secret
  ansible.builtin.shell:
    cmd: |
      yq -i '.grafana.keycloak.clientSecret = "{{ grafana_client_secret.clientsecret_info.value }}"' ../inventory/group_vars/all.yml
  when: not grafana.keycloak.clientSecret == "{{ grafana_client_secret.clientsecret_info.value }}"

# Harbor
- name: Create harbor client
  community.general.keycloak_client:
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak.domain }}
    auth_realm: master
    auth_username: "{{ keycloak.username }}"
    auth_password: "{{ keycloak.password }}"
    realm: "{{ keycloak.realm }}"
    client_id: "{{ harbor.keycloak.clientId }}"
    name: "{{ harbor.keycloak.clientId }}"
    always_display_in_console: true
    frontchannel_logout: true
    enabled: true
    redirect_uris:
      - https://{{ harbor.domain }}/*
    web_origins:
      - https://{{ harbor.domain }}
    standard_flow_enabled: true
    implicit_flow_enabled: false
    direct_access_grants_enabled: true
    clientAuthenticatorType: client-secret
    public_client: false
    protocol: openid-connect
    default_client_scopes:
      - profile
      - email
      - groups
    state: present

- name: Get harbor client secret
  community.general.keycloak_clientsecret_info:
    client_id: "{{ harbor.keycloak.clientId }}"
    realm: "{{ keycloak.realm }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak.domain }}
    auth_realm: master
    auth_username: "{{ keycloak.username }}"
    auth_password: "{{ keycloak.password }}"
  register: harbor_client_secret
  no_log: true

- name: Set harbor client secret
  ansible.builtin.shell:
    cmd: |
      yq -i '.harbor.keycloak.clientSecret = "{{ harbor_client_secret.clientsecret_info.value }}"' ../inventory/group_vars/all.yml
  when: not harbor.keycloak.clientSecret == "{{ harbor_client_secret.clientsecret_info.value }}"

# Minio
- name: Create minio client
  community.general.keycloak_client:
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak.domain }}
    auth_realm: master
    auth_username: "{{ keycloak.username }}"
    auth_password: "{{ keycloak.password }}"
    realm: "{{ keycloak.realm }}"
    client_id: "{{ minio.keycloak.clientId }}"
    name: "{{ minio.keycloak.clientId }}"
    always_display_in_console: true
    frontchannel_logout: true
    enabled: true
    redirect_uris:
      - https://{{ minio.domain }}/*
    web_origins:
      - https://{{ minio.domain }}
    standard_flow_enabled: true
    implicit_flow_enabled: false
    direct_access_grants_enabled: true
    clientAuthenticatorType: client-secret
    public_client: false
    protocol: openid-connect
    default_client_scopes:
      - profile
      - email
      - groups
    state: present

- name: Get minio client secret
  community.general.keycloak_clientsecret_info:
    client_id: "{{ minio.keycloak.clientId }}"
    realm: "{{ keycloak.realm }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak.domain }}
    auth_realm: master
    auth_username: "{{ keycloak.username }}"
    auth_password: "{{ keycloak.password }}"
  register: minio_client_secret
  no_log: true

- name: Set minio client secret
  ansible.builtin.shell:
    cmd: |
      yq -i '.minio.keycloak.clientSecret = "{{ minio_client_secret.clientsecret_info.value }}"' ../inventory/group_vars/all.yml
  when: not minio.keycloak.clientSecret == "{{ minio_client_secret.clientsecret_info.value }}"
