- name: Reset admin token
  when: sonarqube.token == ""
  block:
    - name: Missing Token disclaimer
      ansible.builtin.debug:
        msg: "Impossible de retrouver le TOKEN du compte admin, initialisation en cours â€¦"

    - name: Get version
      ansible.builtin.uri:
        url: "https://{{ sonarqube.domain }}/api/server/version"
        method: GET
        return_content: true
      register: sonar_version

    - name: Get postgres endpoint
      kubernetes.core.k8s_info:
        kind: Endpoints
        namespace: "{{ sonarqube.namespace }}"
        name: pg-cluster-sonar-rw
      register: pg_ep
      until: pg_ep.resources[0].subsets[0].addresses[0] is defined
      retries: 15
      delay: 5

    - name: Set pg_pod
      ansible.builtin.set_fact:
        pg_pod: "{{ pg_ep.resources[0].subsets[0].addresses[0].targetRef.name }}"

    - name: Get admin account
      kubernetes.core.k8s_exec:
        pod: "{{ pg_pod }}"
        namespace: "{{ sonarqube.namespace }}"
        command: psql postgresql://"{{ sonarqube.postgres.app.username }}":"{{ sonarqube.postgres.app.password }}"@127.0.0.1:5432/sonarqube -c "{{ query }}" -t
      vars:
        query: select row_to_json(row) from (SELECT * FROM  users WHERE login = 'admin') row;
      register: admin_account
      until: "admin_account is not failed"
      retries: 10
      delay: 5
      no_log: true

    - name: Generate random token
      ansible.builtin.set_fact:
        admin: "{{ admin_account.stdout | from_json }}"
        token_pass: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters') }}"
      no_log: true

    - name: Get sha384sum of token
      ansible.builtin.shell: "set -o pipefail && echo -n {{ token_pass }} | sha384sum | awk '{ print $1 }'"
      args:
        executable: /bin/bash
      register: token_sha
      changed_when: true
      no_log: true

    - name: Set query fact (for 10.x branch and higher)
      when: sonar_version.content is version('10.0.0', operator='ge', version_type='loose')
      ansible.builtin.set_fact:
        query: >
          INSERT INTO user_tokens
          ("uuid", "user_uuid", "name", "token_hash", last_connection_date, created_at, "type", expiration_date, "project_uuid")
          VALUES('mysuperuuid', '{{ admin.uuid }}', 'fabnum', '{{ token_sha.stdout_lines[0] }}', null, 0, 'USER_TOKEN', null, '')
          ON CONFLICT(uuid) DO UPDATE SET token_hash = '{{ token_sha.stdout_lines[0] }}';

    - name: Set query fact (for 9.x branch and lower)
      when: sonar_version.content is version('10.0.0', operator='lt', version_type='loose')
      ansible.builtin.set_fact:
        query: >
          INSERT INTO user_tokens
          (uuid, user_uuid, "name", token_hash, last_connection_date, created_at, project_key, "type", expiration_date)
          VALUES('mysuperuuid', '{{ admin.uuid }}', 'fabnum', '{{ token_sha.stdout_lines[0] }}', null, 0, '', 'USER_TOKEN', null)
          ON CONFLICT(uuid) DO UPDATE SET token_hash = '{{ token_sha.stdout_lines[0] }}';

    - name: Adding admin token
      kubernetes.core.k8s_exec:
        pod: "{{ pg_pod }}"
        namespace: "{{ sonarqube.namespace }}"
        command: psql postgresql://"{{ sonarqube.postgres.app.username }}":"{{ sonarqube.postgres.app.password }}"@127.0.0.1:5432/sonarqube -c "{{ query }}" -t
      register: admin_token_check
      until: "admin_token_check is not failed"
      retries: 5
      delay: 5
      no_log: true

    - name: Update sonarqube admin token in inventory
      ansible.builtin.shell:
        cmd: |
          yq -i '.sonarqube.token = "{{ token_pass }}"' ../inventory/group_vars/all.yml

- name: Get admin group
  ansible.builtin.uri:
    url: "https://{{ sonarqube.domain }}/api/user_groups/search?q=admin"
    user: "{{ sonarqube.token }}"
    force_basic_auth: true
    method: get
    status_code: [200,400,404]
  register: admin_group

- name: Create admin group
  ansible.builtin.uri:
    url: "https://{{ sonarqube.domain }}/api/user_groups/create?name=admin&description=admin"
    user: "{{ sonarqube.token }}"
    force_basic_auth: true
    method: post
    status_code: [200,204]
  when: not admin_group.status == 200

- name: Add admin permissions to admin group
  ansible.builtin.uri:
    url: "https://{{ sonarqube.domain }}/api/permissions/add_group?groupName=admin&permission={{ item }}"
    user: "{{ sonarqube.token }}"
    force_basic_auth: true
    method: post
    status_code: [200,204]
  with_items:
    - admin
    - gateadmin
    - profileadmin
    - profileadmin
    - provisioning
    - scan

- name: Set oidc settings
  ansible.builtin.uri:
    url: "https://{{ sonarqube.domain }}/api/settings/set?key={{ item.key | urlencode }}&value={{ item.value | urlencode }}"
    user: "{{ sonarqube.token }}"
    force_basic_auth: true
    method: POST
    status_code: 204
  with_dict:
    sonar.core.serverBaseURL: "https://{{ sonarqube.domain }}"
    sonar.auth.oidc.enabled: "true"
    sonar.auth.oidc.allowUsersToSignUp: "true"
    sonar.auth.oidc.autoLogin: "false"
    sonar.auth.oidc.loginButtonText: "Connect with Keycloak"
    sonar.auth.oidc.groupsSync.claimName: "groups"
    sonar.auth.oidc.loginStrategy: "Email"
    sonar.auth.oidc.groupsSync: "true"
    sonar.auth.oidc.scopes: "openid profile email groups"
    sonar.auth.oidc.issuerUri: "https://{{ keycloak.domain }}/realms/{{ keycloak.realm }}"
    sonar.auth.oidc.loginStrategy.customClaim.name: "upn"
    sonar.auth.oidc.clientId.secured: "{{ sonarqube.keycloak.clientId }}"
    sonar.auth.oidc.clientSecret.secured: "{{ sonarqube.keycloak.clientSecret }}"
