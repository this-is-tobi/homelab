mlflow:
  ingress:
    enabled: true
    className: traefik
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      traefik.ingress.kubernetes.io/router.middlewares: mlflow-oauth2-proxy@kubernetescrd
    hosts:
    - host: <path:secret/data/platforms/production/apps/mlflow#domain>
      paths:
        - path: /
          pathType: ImplementationSpecific
    tls:
    - hosts:
      - <path:secret/data/platforms/production/apps/mlflow#domain>
      secretName: <path:secret/data/platforms/production/apps/mlflow#domain>
  service:
    annotations:
      traefik.ingress.kubernetes.io/service.passhostheader: "true"
  backendStore:
    databaseConnectionCheck: true
    postgres:
      enabled: true
      host: <path:secret/data/platforms/production/apps/mlflow#postgres | jsonPath {.host}>
      # port: <path:secret/data/platforms/production/apps/mlflow#postgres | jsonPath {.port}>
      database: <path:secret/data/platforms/production/apps/mlflow#postgres | jsonPath {.database}>
      user: <path:secret/data/platforms/production/apps/mlflow#postgres | jsonPath {.app.username}>
      password: <path:secret/data/platforms/production/apps/mlflow#postgres | jsonPath {.app.password}>
  artifactRoot:
    proxiedArtifactStorage: false
    s3:
      enabled: true
      bucket: <path:secret/data/platforms/production/apps/mlflow#s3 | jsonPath {.bucketName}>
      path: <path:secret/data/platforms/production/apps/mlflow#s3 | jsonPath {.bucketPrefix}>
      awsAccessKeyId: <path:secret/data/platforms/production/apps/mlflow#s3 | jsonPath {.accessKey}>
      awsSecretAccessKey: <path:secret/data/platforms/production/apps/mlflow#s3 | jsonPath {.secretKey}>
  extraEnvVars:
    MLFLOW_S3_ENDPOINT_URL: <path:secret/data/platforms/production/apps/mlflow#s3 | jsonPath {.endpoint}>
    AWS_DEFAULT_REGION: <path:secret/data/platforms/production/apps/mlflow#s3 | jsonPath {.region}>
  # auth:
  #   enabled: false
  #   adminUsername: <path:secret/data/platforms/production/apps/mlflow#admin | jsonPath {.username}>
  #   adminPassword: <path:secret/data/platforms/production/apps/mlflow#admin | jsonPath {.password}>
  #   # -- Default permission for all users. More details: https://mlflow.org/docs/latest/auth/index.html#permissions
  #   defaultPermission: READ
  #   # -- PostgreSQL based centrilised authentication database
  #   postgres:
  #     enabled: false
  #     # host: <path:secret/data/platforms/production/apps/mlflow#postgres | jsonPath {.host}>
  #     # port: <path:secret/data/platforms/production/apps/mlflow#postgres | jsonPath {.port}>
  #     # database: <path:secret/data/platforms/production/apps/mlflow#postgres | jsonPath {.database}>
  #     # user: <path:secret/data/platforms/production/apps/mlflow#postgres | jsonPath {.app.username}>
  #     # password: <path:secret/data/platforms/production/apps/mlflow#postgres | jsonPath {.app.password}>
  resources:
    requests:
      memory: 512Mi
      cpu: 250m
    limits:
      memory: 1Gi
      cpu: "1"

cnpg:
  fullnameOverride: mlflow-pg-cluster
  dbName: mlflow
  username: mlflow
  password: <path:secret/data/platforms/production/apps/mlflow#postgres | jsonPath {.app.password}>
  postgresPassword: <path:secret/data/platforms/production/apps/mlflow#postgres | jsonPath {.admin.password}>
  mode: primary
  instances: 3
  pvcSize:
    data: 3Gi
    wal: 1Gi
  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 1Gi
  backup:
    enabled: false
    endpointURL: <path:secret/data/platforms/production/apps/mlflow#postgres | jsonPath {.s3.endpoint}>
    destinationPath: s3://<path:secret/data/platforms/production/apps/mlflow#postgres | jsonPath {.s3.bucketName}>/<path:secret/data/platforms/production/apps/mlflow#postgres | jsonPath {.s3.bucketPrefix}>
    cron: 0 0 0 * * *
    retentionPolicy: 30d
    compression: gzip
    s3Credentials:
      create: true
      secretName: mlflow-pg-cluster-backup
      accessKeyId:
        key: accessKeyId
        value: <path:secret/data/platforms/production/apps/mlflow#postgres | jsonPath {.s3.accessKey}>
      secretAccessKey:
        key: secretAccessKey
        value: <path:secret/data/platforms/production/apps/mlflow#postgres | jsonPath {.s3.secretKey}>
      region:
        key: region
        value: <path:secret/data/platforms/production/apps/mlflow#postgres | jsonPath {.s3.region}>

sso:
  config:
    clientID: "<path:secret/data/platforms/production/apps/mlflow#keycloak | jsonPath {.clientId}>"
    clientSecret: "<path:secret/data/platforms/production/apps/mlflow#keycloak | jsonPath {.clientSecret}>"
    cookieSecret: "<path:secret/data/platforms/production/apps/mlflow#keycloak | jsonPath {.cookieSecret}>"
    configFile: |-
      provider = "keycloak-oidc"
      provider_display_name = "Keycloak"
      email_domains = [ "*" ]
      upstreams = [ "http://mlflow.mlflow.svc.cluster.local:5000/" ]
      redirect_url = "https://<path:secret/data/platforms/production/apps/mlflow#domain>/oauth2/callback"
      oidc_issuer_url = "https://<path:secret/data/platforms/production/apps/keycloak#domain>/realms/<path:secret/data/platforms/production/apps/keycloak#extras | jsonPath {.realm}>"
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
    path: /oauth2
    hosts:
    - <path:secret/data/platforms/production/apps/mlflow#domain>
    tls:
      - secretName: <path:secret/data/platforms/production/apps/mlflow#domain>
        hosts:
          - <path:secret/data/platforms/production/apps/mlflow#domain>
