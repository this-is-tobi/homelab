sonarqube:
  community:
    enabled: true
    buildNumber: 25.7.0.110598
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-http-prod
      nginx.ingress.kubernetes.io/proxy-body-size: ""
      ingressClassName: nginx
    hosts:
      - name: <path:secret/data/platforms/production/apps/sonarqube#domain>
        path: /
    tls:
      - hosts:
          - <path:secret/data/platforms/production/apps/sonarqube#domain>
        secretName: <path:secret/data/platforms/production/apps/sonarqube#domain>
  plugins:
    install:
      - https://github.com/mc1arke/sonarqube-community-branch-plugin/releases/download/25.7.0/sonarqube-community-branch-plugin-25.7.0.jar
      - https://github.com/vaulttec/sonar-auth-oidc/releases/download/v3.0.0/sonar-auth-oidc-plugin-3.0.0.jar
      - https://github.com/cnescatlab/sonar-cnes-report/releases/download/5.0.2/sonar-cnes-report-5.0.2.jar
  resources:
    limits:
      cpu: 800m
      memory: 4Gi
    requests:
      cpu: 200m
      memory: 2Gi
  postgresql:
    enabled: false
  jdbcOverwrite:
    enable: true
    jdbcUrl: <path:secret/data/platforms/production/apps/sonarqube#postgres | jsonPath {.connectionString}>
    jdbcUsername: <path:secret/data/platforms/production/apps/sonarqube#postgres | jsonPath {.app.username}>
    jdbcSecretName: sonarqube-pg-cluster-app
    jdbcSecretPasswordKey: password
  account:
    adminPasswordSecretName: sonarqube-admin
  monitoringPasscodeSecretName: sonarqube-monitoring-admin
  monitoringPasscodeSecretKey: password
  jvmOpts: "-javaagent:/opt/sonarqube/extensions/plugins/sonarqube-community-branch-plugin-25.7.0.jar=web"
  jvmCeOpts: "-javaagent:/opt/sonarqube/extensions/plugins/sonarqube-community-branch-plugin-25.7.0.jar=ce"
  initSysctl:
    vmMaxMapCount: 262144
  prometheusMonitoring:
    podMonitor:
      enabled: true
      namespace: sonarqube
  prometheusExporter:
    enabled: true
  livenessProbe:
    initialDelaySeconds: 180
    periodSeconds: 30
    failureThreshold: 20
  startupProbe:
    initialDelaySeconds: 60
    periodSeconds: 20
    failureThreshold: 30
  sonarProperties:
    sonar.core.serverBaseURL: "https://<path:secret/data/platforms/production/apps/sonarqube#domain>"
    sonar.plugins.risk.consent: "ACCEPTED"
    sonar.auth.oidc.enabled: "true"
    sonar.auth.oidc.allowUsersToSignUp: "true"
    sonar.auth.oidc.autoLogin: "false"
    sonar.auth.oidc.loginButtonText: "Connect with Keycloak"
    sonar.auth.oidc.groupsSync.claimName: "groups"
    sonar.auth.oidc.loginStrategy: "Email"
    sonar.auth.oidc.groupsSync: "true"
    sonar.auth.oidc.scopes: "openid profile email roles groups"
    sonar.auth.oidc.issuerUri: "https://<path:secret/data/platforms/production/apps/keycloak#domain>/realms/<path:secret/data/platforms/production/apps/keycloak#extras | jsonPath {.realm}>"
    sonar.auth.oidc.loginStrategy.customClaim.name: "upn"
    sonar.auth.oidc.clientId.secured: "<path:secret/data/platforms/production/apps/sonarqube#keycloak | jsonPath {.clientId}>"
    sonar.auth.oidc.clientSecret.secured: "<path:secret/data/platforms/production/apps/sonarqube#keycloak | jsonPath {.clientSecret}>"
  extraVolumes:
  - name: webapp
    emptyDir:
      sizeLimit: 50Mi
  extraVolumeMounts:
  - name: webapp
    mountPath: /opt/sonarqube/web
  extraInitContainers:
  - name: download-webapp
    image: docker.io/busybox:1.37
    volumeMounts:
    - name: webapp
      mountPath: /web
    command:
    - sh
    - -c
    - wget -O /tmp/sonarqube-webapp.zip https://github.com/mc1arke/sonarqube-community-branch-plugin/releases/download/25.7.0/sonarqube-webapp.zip && unzip -o /tmp/sonarqube-webapp.zip -d /web && chmod -R 755 /web && chown -R 1000:0 /web && rm -f /tmp/sonarqube-webapp.zip

cnpg:
  fullnameOverride: sonarqube-pg-cluster
  imageName: ghcr.io/cloudnative-pg/postgresql:15.4
  dbName: sonarqube
  credentials:
    username: sonarqube
    password: <path:secret/data/platforms/production/apps/sonarqube#postgres | jsonPath {.app.password}>
    postgresPassword: <path:secret/data/platforms/production/apps/sonarqube#postgres | jsonPath {.admin.password}>
  mode: primary
  instances: 3
  enableSuperuserAccess: false
  pvcSize:
    data: 7Gi
    wal: 2Gi
  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 1Gi
  backup:
    enabled: false
    endpointURL: <path:secret/data/platforms/production/apps/sonarqube#postgres | jsonPath {.s3.endpoint}>
    destinationPath: s3://<path:secret/data/platforms/production/apps/sonarqube#postgres | jsonPath {.s3.bucketName}>/<path:secret/data/platforms/production/apps/sonarqube#postgres | jsonPath {.s3.bucketPrefix}>
    cron: 0 0 0 * * *
    retentionPolicy: 30d
    compression: gzip
    s3Credentials:
      create: true
      secretName: sonarqube-pg-cluster-backup
      accessKeyId:
        key: accessKeyId
        value: <path:secret/data/platforms/production/apps/sonarqube#postgres | jsonPath {.s3.accessKey}>
      secretAccessKey:
        key: secretAccessKey
        value: <path:secret/data/platforms/production/apps/sonarqube#postgres | jsonPath {.s3.secretKey}>
      region:
        key: region
        value: <path:secret/data/platforms/production/apps/sonarqube#postgres | jsonPath {.s3.region}>
