argo-cd:
  configs:
    secret:
      argocdServerAdminPassword: <path:secret/data/platforms/production/apps/argo-cd#admin | jsonPath {.password}>
    params:
      server.insecure: true
    rbac:
      policy.csv: |
        p, role:none, *, *, */*, deny
        p, role:admin, *, *, */*, allow
        g, admin, role:admin
    policy.default: role:none
    scopes: "[groups]"
    cm:
      url: https://<path:secret/data/platforms/production/apps/argo-cd#domain>
      resource.customizations: |
        networking.k8s.io/Ingress:
          health.lua: |
            hs = {}
            hs.status = "Healthy"
            return hs
      oidc.config: |
        name: Keycloak
        issuer: https://<path:secret/data/platforms/production/apps/keycloak#domain>/realms/<path:secret/data/platforms/production/apps/keycloak#extras | jsonPath {.realm}>
        clientID: <path:secret/data/platforms/production/apps/argo-cd#keycloak | jsonPath {.clientId}>
        clientSecret: <path:secret/data/platforms/production/apps/argo-cd#keycloak | jsonPath {.clientSecret}>
        requestedScopes: ["openid", "profile", "email", "groups"]
  redis-ha:
    enabled: false
  redis:
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
  notifications:
    enabled: true
    argocdUrl: https://<path:secret/data/platforms/production/apps/argo-cd#domain>
    context:
      provider: OVH
      cluster: fabnum
      environment: production
    secret:
      create: true
      items:
        mattermost-token: <path:secret/data/platforms/production/apps/argo-cd#notifications | jsonPath {.mattermost.token}>
        email-username: <path:secret/data/platforms/production/apps/argo-cd#smtp | jsonPath {.username}>
        email-password: <path:secret/data/platforms/production/apps/argo-cd#smtp | jsonPath {.password}>
    notifiers:
      service.email: |
        username: $email-username
        password: $email-password
        host: <path:secret/data/platforms/production/apps/argo-cd#smtp | jsonPath {.server}>
        port: <path:secret/data/platforms/production/apps/argo-cd#smtp | jsonPath {.port}>
        from: <path:secret/data/platforms/production/apps/argo-cd#smtp | jsonPath {.email}>
      service.mattermost: |
        apiURL: https://<path:secret/data/platforms/production/apps/mattermost#domain>
        token: $mattermost-token
    triggers:
      trigger.on-deployed: |
        - description: Application is synced and healthy. Triggered once per commit.
          oncePer: app.status.sync.revision
          send:
          - app-deployed
          when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
      trigger.on-health-degraded: |
        - description: Application has degraded
          send:
          - app-health-degraded
          when: app.status.health.status == 'Degraded'
      trigger.on-sync-failed: |
        - description: Application syncing has failed
          send:
          - app-sync-failed
          when: app.status.operationState.phase in ['Error', 'Failed']
      trigger.on-sync-running: |
        - description: Application is being synced
          send:
          - app-sync-running
          when: app.status.operationState.phase in ['Running']
      trigger.on-sync-status-unknown: |
        - description: Application status is 'Unknown'
          send:
          - app-sync-status-unknown
          when: app.status.sync.status == 'Unknown'
      trigger.on-sync-succeeded: |
        - description: Application syncing has succeeded
          send:
          - app-sync-succeeded
          when: app.status.operationState.phase in ['Succeeded']
    # defaultTriggers.email: |
    #   - on-deployed
    #   - on-health-degraded
    #   - on-sync-running
    #   - on-sync-succeeded
    #   - on-sync-failed
    #   - on-sync-status-unknown
    defaultTriggers.mattermost: |
      - on-deployed
      - on-health-degraded
      - on-sync-running
      - on-sync-succeeded
      - on-sync-failed
      - on-sync-status-unknown
    templates:
      template.app-deployed: |
        email:
          subject: New version of an application {{.app.metadata.name}} is up and running.
        message: |
          {{if eq .serviceType "mattermost"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.
        mattermost:
          attachments: |
            [{
              "title": "{{.app.metadata.name}}",
              "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
              "color": "#18be52",
              "fields": [
              {
                "title": "Sync Status",
                "value": "{{.app.status.sync.status}}",
                "short": true
              },
              {
                "title": "Repository",
                "value": "{{.app.spec.source.repoURL}}",
                "short": true
              },
              {
                "title": "Revision",
                "value": "{{.app.status.sync.revision}}",
                "short": true
              }
              {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "title": "{{$c.type}}",
                "value": "{{$c.message}}",
                "short": true
              }
              {{end}}
              ]
            }]
      template.app-health-degraded: |
        email:
          subject: Application {{.app.metadata.name}} has degraded.
        message: |
          {{if eq .serviceType "mattermost"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.
          Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
        mattermost:
          attachments: |-
            [{
              "title": "{{ .app.metadata.name}}",
              "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
              "color": "#f4c030",
              "fields": [
              {
                "title": "Sync Status",
                "value": "{{.app.status.sync.status}}",
                "short": true
              },
              {
                "title": "Repository",
                "value": "{{.app.spec.source.repoURL}}",
                "short": true
              }
              {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "title": "{{$c.type}}",
                "value": "{{$c.message}}",
                "short": true
              }
              {{end}}
              ]
            }]
      template.app-sync-failed: |
        email:
          subject: Failed to sync application {{.app.metadata.name}}.
        message: |
          {{if eq .serviceType "mattermost"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}
          Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
        mattermost:
          attachments: |-
            [{
              "title": "{{ .app.metadata.name}}",
              "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
              "color": "#E96D76",
              "fields": [
              {
                "title": "Sync Status",
                "value": "{{.app.status.sync.status}}",
                "short": true
              },
              {
                "title": "Repository",
                "value": "{{.app.spec.source.repoURL}}",
                "short": true
              }
              {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "title": "{{$c.type}}",
                "value": "{{$c.message}}",
                "short": true
              }
              {{end}}
              ]
            }]
      template.app-sync-running: |
        email:
          subject: Start syncing application {{.app.metadata.name}}.
        message: |
          The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.
          Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
        mattermost:
          attachments: |-
            [{
              "title": "{{ .app.metadata.name}}",
              "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
              "color": "#0DADEA",
              "fields": [
              {
                "title": "Sync Status",
                "value": "{{.app.status.sync.status}}",
                "short": true
              },
              {
                "title": "Repository",
                "value": "{{.app.spec.source.repoURL}}",
                "short": true
              }
              {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "title": "{{$c.type}}",
                "value": "{{$c.message}}",
                "short": true
              }
              {{end}}
              ]
            }]
      template.app-sync-status-unknown: |
        email:
          subject: Application {{.app.metadata.name}} sync status is 'Unknown'
        message: |
          {{if eq .serviceType "mattermost"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.
          Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
          {{if ne .serviceType "mattermost"}}
          {{range $c := .app.status.conditions}}
              * {{$c.message}}
          {{end}}
          {{end}}
        mattermost:
          attachments: |-
            [{
              "title": "{{ .app.metadata.name}}",
              "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
              "color": "#E96D76",
              "fields": [
              {
                "title": "Sync Status",
                "value": "{{.app.status.sync.status}}",
                "short": true
              },
              {
                "title": "Repository",
                "value": "{{.app.spec.source.repoURL}}",
                "short": true
              }
              {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "title": "{{$c.type}}",
                "value": "{{$c.message}}",
                "short": true
              }
              {{end}}
              ]
            }]
      template.app-sync-succeeded: |
        email:
          subject: Application {{.app.metadata.name}} has been successfully synced.
        message: |
          {{if eq .serviceType "mattermost"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.
          Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
        mattermost:
          attachments: |-
            [{
              "title": "{{ .app.metadata.name}}",
              "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
              "color": "#18be52",
              "fields": [
              {
                "title": "Sync Status",
                "value": "{{.app.status.sync.status}}",
                "short": true
              },
              {
                "title": "Repository",
                "value": "{{.app.spec.source.repoURL}}",
                "short": true
              }
              {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "title": "{{$c.type}}",
                "value": "{{$c.message}}",
                "short": true
              }
              {{end}}
              ]
            }]
    replicas: 1
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
  controller:
    replicas: 1
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
  applicationSet:
    enabled: true
    replicas: 1
    ingress:
      enabled: true
      ingressClassName: traefik
      hostname: appset.<path:secret/data/platforms/production/apps/argo-cd#domain>
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
      tls: true
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
  dex:
    enabled: false
    nodeSelector:
      node-type: worker
  server:
    autoscaling:
      enabled: false
      minReplicas: 1
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    ingress:
      enabled: true
      ingressClassName: traefik
      hostname: <path:secret/data/platforms/production/apps/argo-cd#domain>
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
      tls: true
  repoServer:
    autoscaling:
      enabled: false
      minReplicas: 1
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    rbac:
    - apiGroups:
      - ""
      resources:
      - secrets
      verbs:
      - get
      - watch
    initContainers:
    - name: download-tools
      image: registry.access.redhat.com/ubi8
      env:
      - name: AVP_VERSION
        value: 1.18.1
      command: [sh, -c]
      args:
      - >-
        OS="$(uname | tr '[:upper:]' '[:lower:]')" && [ "$(uname -m)" = "aarch64" ] && ARCH="arm64" || ARCH="amd64" &&
        curl -L https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v$(AVP_VERSION)/argocd-vault-plugin_$(AVP_VERSION)_${OS}_${ARCH} -o argocd-vault-plugin &&
        chmod +x argocd-vault-plugin &&
        mv argocd-vault-plugin /custom-tools/
      volumeMounts:
      - mountPath: /custom-tools
        name: custom-tools
    extraContainers:
    - name: avp
      command: [/var/run/argocd/argocd-cmp-server]
      image: quay.io/argoproj/argocd:v2.11.5
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
      envFrom:
      - secretRef:
          name: vault-plugin-secret
      volumeMounts:
      - mountPath: /var/run/argocd
        name: var-files
      - mountPath: /home/argocd/cmp-server/plugins
        name: plugins
      - mountPath: /tmp
        name: tmp
      # Register plugins into sidecar
      - mountPath: /home/argocd/cmp-server/config/plugin.yaml
        subPath: avp.yaml
        name: cmp-plugin
      # Important: Mount tools into $PATH
      - name: custom-tools
        subPath: argocd-vault-plugin
        mountPath: /usr/local/bin/argocd-vault-plugin
    - name: avp-helm
      command: [/var/run/argocd/argocd-cmp-server]
      image: quay.io/argoproj/argocd:v2.11.5
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
      envFrom:
      - secretRef:
          name: vault-plugin-secret
      volumeMounts:
      - mountPath: /var/run/argocd
        name: var-files
      - mountPath: /home/argocd/cmp-server/plugins
        name: plugins
      - mountPath: /tmp
        name: tmp
      # Register plugins into sidecar
      - mountPath: /home/argocd/cmp-server/config/plugin.yaml
        subPath: avp-helm.yaml
        name: cmp-plugin
      # Important: Mount tools into $PATH
      - name: custom-tools
        subPath: argocd-vault-plugin
        mountPath: /usr/local/bin/argocd-vault-plugin
    - name: avp-kustomize
      command: [/var/run/argocd/argocd-cmp-server]
      image: quay.io/argoproj/argocd:v2.11.5
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
      envFrom:
      - secretRef:
          name: vault-plugin-secret
      volumeMounts:
      - mountPath: /var/run/argocd
        name: var-files
      - mountPath: /home/argocd/cmp-server/plugins
        name: plugins
      - mountPath: /tmp
        name: tmp
      # Register plugins into sidecar
      - mountPath: /home/argocd/cmp-server/config/plugin.yaml
        subPath: avp-kustomize.yaml
        name: cmp-plugin
      # Important: Mount tools into $PATH
      - name: custom-tools
        subPath: argocd-vault-plugin
        mountPath: /usr/local/bin/argocd-vault-plugin
    volumes:
    - configMap:
        name: cmp-plugin
      name: cmp-plugin
    - name: custom-tools
      emptyDir: {}
  crds:
    install: false
    keep: true
