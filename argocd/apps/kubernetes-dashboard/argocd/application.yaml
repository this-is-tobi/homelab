apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kubernetes-dashboard
  namespace: argocd
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  project: admin
  revisionHistoryLimit: 5
  sources:
  - chart: kubernetes-dashboard
    repoURL: https://kubernetes.github.io/dashboard
    targetRevision: 7.0.0-alpha1
    helm:
      releaseName: kubernetes-dashboard
      valuesObject:
        app:
          ingress:
            enabled: true
            ingressClassName: traefik
            issuer:
              name: letsencrypt-prod
              scope: cluster
            hosts:
            - kube.alpha.ohmlab.fr
            paths:
              web: /
              api: /api
            tls:
            - hosts:
              - kube.alpha.ohmlab.fr
              secretName: kube.alpha.ohmlab.fr
          nodeSelector:
            node-type: worker
          settings:
            global:
              itemsPerPage: 25
        extras:
          clusterReadOnlyRole: true
          clusterReadOnlyRoleAdditionalRules:
          # Allow Metrics Scraper to get metrics from the Metrics server
          - apiGroups: ["metrics.k8s.io"]
            resources: ["pods", "nodes"]
            verbs: ["get", "list", "watch"]
          # Other resources
          - apiGroups: [""]
            resources: ["nodes", "namespaces", "pods", "serviceaccounts", "services", "configmaps", "endpoints", "persistentvolumeclaims", "replicationcontrollers", "replicationcontrollers/scale", "persistentvolumeclaims", "persistentvolumes", "bindings", "events", "limitranges", "namespaces/status", "pods/log", "pods/status", "replicationcontrollers/status", "resourcequotas", "resourcequotas/status", "secrets"]
            verbs: ["get", "list", "watch"]
          - apiGroups: ["apps"]
            resources: ["daemonsets", "deployments", "deployments.apps", "deployments/scale", "replicasets", "replicasets/scale", "statefulsets"]
            verbs: ["get", "list", "watch"]
          - apiGroups: ["autoscaling"]
            resources: ["horizontalpodautoscalers"]
            verbs: ["get", "list", "watch"]
          - apiGroups: ["batch"]
            resources: ["cronjobs", "jobs", "jobs.batch"]
            verbs: ["get", "list", "watch"]
          - apiGroups: ["extensions"]
            resources: ["daemonsets", "deployments", "deployments/scale", "networkpolicies", "replicasets", "replicasets/scale", "replicationcontrollers/scale"]
            verbs: ["get", "list", "watch"]
          - apiGroups: ["networking.k8s.io"]
            resources: ["ingresses", "ingressclasses", "networkpolicies"]
            verbs: ["get", "list", "watch"]
          - apiGroups: ["policy"]
            resources: ["poddisruptionbudgets"]
            verbs: ["get", "list", "watch"]
          - apiGroups: ["storage.k8s.io"]
            resources: ["storageclasses", "volumeattachments"]
            verbs: ["get", "list", "watch"]
          - apiGroups: ["rbac.authorization.k8s.io"]
            resources: ["clusterrolebindings", "clusterroles", "roles", "rolebindings"]
            verbs: ["get", "list", "watch"]
          - apiGroups: ["apiextensions.k8s.io"]
            resources: ["customresourcedefinitions.apiextensions.k8s.io"]
            verbs: ["get", "list", "watch"]
        cert-manager:
          enabled: false
        nginx:
          enabled: false
        metrics-server:
          enabled: false
  destination:
    server: https://kubernetes.default.svc
    namespace: kubernetes-dashboard
  syncPolicy:
    # automated:
    #   selfHeal: false
    syncOptions:
    - CreateNamespace=true
    - ApplyOutOfSyncOnly=true
